console.log('üöÄ MUSCLE LEVELS - Iniciando servidor...'); 

// Simular o ambiente de teste b√°sico
const mockData = {
  selectedEquipment: ['BODYWEIGHT'],
  selectedMuscles: ['CHEST'],
  limit: 3
};

console.log('‚úÖ TESTE: Simulando chamada com:', mockData);

// Simular fun√ß√£o getMockExercises diretamente aqui
const mockExercises = [
  {
    id: "1",
    name: "Flex√£o de Bra√ßos",
    nameEn: "Push Ups", 
    description: "Exerc√≠cio com peso corporal para peitoral",
    descriptionEn: "Bodyweight exercise for chest",
    attributes: [
      { attributeName: { name: "PRIMARY_MUSCLE" }, attributeValue: { value: "CHEST" } },
      { attributeName: { name: "EQUIPMENT" }, attributeValue: { value: "BODYWEIGHT" } }
    ]
  },
  {
    id: "2",
    name: "Flex√£o Inclinada",
    nameEn: "Incline Push Ups",
    description: "Flex√£o com p√©s elevados",
    descriptionEn: "Push ups with feet elevated", 
    attributes: [
      { attributeName: { name: "PRIMARY_MUSCLE" }, attributeValue: { value: "CHEST" } },
      { attributeName: { name: "EQUIPMENT" }, attributeValue: { value: "BODYWEIGHT" } }
    ]
  }
];

console.log('üìã EXERC√çCIOS MOCK DISPON√çVEIS:', mockExercises.length);

// Simular a filtragem
const filtered = mockExercises.filter(exercise => {
  const exerciseEquipment = exercise.attributes.find(
    attr => attr.attributeName.name === "EQUIPMENT"
  )?.attributeValue.value;
  
  const primaryMuscle = exercise.attributes.find(
    attr => attr.attributeName.name === "PRIMARY_MUSCLE"
  )?.attributeValue.value;

  const equipmentMatch = mockData.selectedEquipment.includes(exerciseEquipment);
  const muscleMatch = mockData.selectedMuscles.includes(primaryMuscle);

  console.log(`üîç Exerc√≠cio: ${exercise.name}, M√∫sculo: ${primaryMuscle}, Equipamento: ${exerciseEquipment}, Match: ${equipmentMatch && muscleMatch}`);

  return equipmentMatch && muscleMatch;
});

console.log('‚úÖ EXERC√çCIOS FILTRADOS:', filtered.length);

// Agrupar por m√∫sculo
const result = mockData.selectedMuscles.map(muscle => {
  const muscleExercises = filtered.filter(exercise =>
    exercise.attributes.find(
      attr => attr.attributeName.name === "PRIMARY_MUSCLE" &&
               attr.attributeValue.value === muscle
    )
  );
  
  console.log(`üí™ M√∫sculo ${muscle}: ${muscleExercises.length} exerc√≠cios`);
  
  return {
    muscle,
    exercises: muscleExercises
  };
}).filter(group => group.exercises.length > 0);

console.log('üéØ RESULTADO FINAL:', JSON.stringify(result, null, 2));

if (result.length > 0) {
  console.log('‚úÖ SUCESSO! Mock service funcionando corretamente!');
  console.log(`‚úÖ Total: ${result.length} grupos de m√∫sculos com exerc√≠cios`);
} else {
  console.log('‚ùå FALHA! Nenhum exerc√≠cio encontrado!');
}